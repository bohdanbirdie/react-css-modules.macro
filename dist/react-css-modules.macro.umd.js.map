{"version":3,"file":"react-css-modules.macro.umd.js","sources":["../src/macro.js"],"sourcesContent":["const { createMacro } = require(\"babel-plugin-macros\");\nconst { name } = require(\"../package.json\");\n\nconst defaultConfig = {\n  enableMemo: true,\n  targetTag: \"styleName\",\n  warning: false,\n};\n\nconst ensureAttrName = (attr) => {\n  if (attr && attr.name && attr.name.name) {\n    return attr.name.name;\n  }\n\n  return '';\n}\n\nconst removeStyleNameAttr = (path, config) => {\n  path.node.openingElement.attributes = [\n    ...path.node.openingElement.attributes.filter(\n      attr => ensureAttrName(attr) !== config.targetTag,\n    ),\n  ];\n};\n\nconst findClassNameAttr = path => {\n  return path.node.openingElement.attributes.find(\n    attr => ensureAttrName(attr) === \"className\",\n  );\n};\n\nconst createClassNameAttr = (t, value) => {\n  return t.JSXAttribute(t.jsxIdentifier(\"className\"), value);\n};\n\nconst getStyleNameAttrPayload = (t, styleNameAttr) => {\n  if (t.isStringLiteral(styleNameAttr.value)) {\n    if (!styleNameAttr.value.value) {\n      return undefined;\n    }\n    const stringValueReplacement = styleNameAttr.value.value\n      .split(\" \")\n      .map(val => t.stringLiteral(val));\n    if (stringValueReplacement.length > 1) {\n      return t.arrayExpression(stringValueReplacement);\n    }\n\n    if (stringValueReplacement[0]) {\n      return stringValueReplacement[0];\n    }\n\n    return undefined;\n  }\n\n  return styleNameAttr.value.expression;\n};\n\nconst visitor = (t, getStyleNameIdentifier, config) => ({\n  JSXElement(path) {\n    if (path.node.openingElement.attributes.length) {\n      const styleNameAttr = path.node.openingElement.attributes.find(\n        attr => ensureAttrName(attr) === config.targetTag,\n      );\n      if (styleNameAttr) {\n        removeStyleNameAttr(path, config);\n        const styleNameAttrPayload = getStyleNameAttrPayload(t, styleNameAttr);\n\n        const styleNameExp = t.callExpression(getStyleNameIdentifier, [\n          ...[styleNameAttrPayload].filter(Boolean),\n        ]);\n        const classNameAttr = findClassNameAttr(path);\n\n        if (classNameAttr) {\n          if (styleNameAttrPayload) {\n            if (t.isJSXExpressionContainer(classNameAttr.value)) {\n              classNameAttr.value = t.JSXExpressionContainer(\n                t.binaryExpression(\n                  \"+\",\n                  classNameAttr.value.expression,\n                  styleNameExp,\n                ),\n              );\n            }\n\n            if (t.isStringLiteral(classNameAttr.value)) {\n              classNameAttr.value = t.JSXExpressionContainer(\n                t.binaryExpression(\"+\", classNameAttr.value, styleNameExp),\n              );\n            }\n          }\n\n          path.node.openingElement.attributes = [\n            classNameAttr,\n            ...path.node.openingElement.attributes.filter(\n              node => ensureAttrName(node) !== \"className\",\n            ),\n          ];\n        } else {\n          const newClassNameAttr = createClassNameAttr(\n            t,\n            t.JSXExpressionContainer(styleNameExp),\n          );\n\n          path.node.openingElement.attributes = [\n            newClassNameAttr,\n            ...path.node.openingElement.attributes.filter(\n              node => ensureAttrName(node) !== \"className\",\n            ),\n          ];\n        }\n      }\n    }\n  },\n});\n\nconst getStylesArgument = path => path.parent.arguments[0];\n\nconst myMacro = ({ references, babel, config }) => {\n  const marcoConfig = { ...defaultConfig, ...config };\n  const { macro = [] } = references;\n  const { types: t } = babel;\n  macro.forEach(referencePath => {\n    const stylesArgument = getStylesArgument(referencePath);\n\n    if (!stylesArgument) {\n      throw \"Styles map argument must be provided\";\n    }\n\n    const programPath = referencePath.findParent(parentPath =>\n      parentPath.isProgram(),\n    );\n    referencePath.parentPath.remove();\n    const firstImportDeclarationNode = programPath\n      .get(\"body\")\n      .find(node => t.isImportDeclaration(node));\n\n    const firstNonImportDeclarationNode = programPath\n      .get(\"body\")\n      .find(node => !t.isImportDeclaration(node));\n\n    const getStyleNameIdentifier = programPath.scope.generateUidIdentifier(\n      \"getStyleName\",\n    );\n\n    const bindStyleNames = programPath.scope.generateUidIdentifier(\n      \"bindStyleNames\",\n    );\n\n    const bindImplementation = marcoConfig.enableMemo\n      ? `${name}/dist/bindStyleNameMemo`\n      : `${name}/dist/bindStyleNamePure`;\n    const helperImportDeclaration = t.importDeclaration(\n      [t.importDefaultSpecifier(bindStyleNames)],\n      t.stringLiteral(bindImplementation),\n    );\n\n    const bindedStylesDeclaration = t.variableDeclaration(\"const\", [\n      t.variableDeclarator(\n        getStyleNameIdentifier,\n        t.callExpression(bindStyleNames, [\n          stylesArgument,\n          marcoConfig.warning\n            ? t.booleanLiteral(true)\n            : t.booleanLiteral(false),\n        ]),\n      ),\n    ]);\n\n    firstImportDeclarationNode.insertBefore(helperImportDeclaration);\n    firstNonImportDeclarationNode.insertBefore(bindedStylesDeclaration);\n\n    programPath.traverse(visitor(t, getStyleNameIdentifier, marcoConfig));\n  });\n};\n\nexport default createMacro(myMacro, { configName: \"reactCssModulesMacro\" });\n"],"names":["createMacro","require","name","defaultConfig","enableMemo","targetTag","warning","ensureAttrName","attr","references","babel","marcoConfig","config","macro","t","types","forEach","referencePath","stylesArgument","parent","arguments","programPath","findParent","parentPath","isProgram","remove","firstImportDeclarationNode","get","find","node","isImportDeclaration","firstNonImportDeclarationNode","getStyleNameIdentifier","scope","generateUidIdentifier","bindStyleNames","bindImplementation","helperImportDeclaration","importDeclaration","importDefaultSpecifier","stringLiteral","bindedStylesDeclaration","variableDeclaration","variableDeclarator","callExpression","booleanLiteral","insertBefore","traverse","JSXElement","path","openingElement","attributes","length","styleNameAttr","filter","removeStyleNameAttr","styleNameAttrPayload","isStringLiteral","value","stringValueReplacement","split","map","val","arrayExpression","expression","getStyleNameAttrPayload","styleNameExp","Boolean","classNameAttr","findClassNameAttr","isJSXExpressionContainer","JSXExpressionContainer","binaryExpression","newClassNameAttr","JSXAttribute","jsxIdentifier","createClassNameAttr","visitor","configName"],"mappings":"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"}