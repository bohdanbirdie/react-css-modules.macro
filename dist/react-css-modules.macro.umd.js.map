{"version":3,"file":"react-css-modules.macro.umd.js","sources":["../src/macro.js"],"sourcesContent":["const { createMacro } = require(\"babel-plugin-macros\");\nconst { name } = require(\"../package.json\");\n\nconst defaultConfig = {\n  enableMemo: true,\n  targetTag: \"styleName\",\n  warning: true, // TODO: set false\n};\n\nconst ensureAttrName = attr => {\n  if (attr && attr.name && attr.name.name) {\n    return attr.name.name;\n  }\n\n  return \"\";\n};\n\nconst removeStyleNameAttr = (path, config) => {\n  path.node.openingElement.attributes = [\n    ...path.node.openingElement.attributes.filter(\n      attr => ensureAttrName(attr) !== config.targetTag,\n    ),\n  ];\n};\n\nconst findStyleNameAttrIndex = (path, config, t) => {\n  const list = path.node.openingElement.attributes.map(attr => {\n    return t.isJSXAttribute(attr) && ensureAttrName(attr) === config.targetTag;\n  });\n\n  return list.indexOf(true);\n};\n\nconst findClassNameAttr = (path, t) => {\n  return path.node.openingElement.attributes.find(\n    attr => ensureAttrName(attr) === \"className\",\n  );\n};\n\nconst findJSXSpreadAttr = (path, t) => {\n  const propsSpread = path.node.openingElement.attributes.find(attr => {\n    return t.isJSXSpreadAttribute(attr);\n  });\n\n  if (propsSpread) {\n    return t.memberExpression(propsSpread.argument, t.identifier(\"className\"));\n  }\n  return false;\n};\n\nconst createClassNameAttr = (t, value) => {\n  return t.JSXAttribute(t.jsxIdentifier(\"className\"), value);\n};\n\nconst getStyleNameAttrPayload = (t, styleNameAttr) => {\n  if (t.isStringLiteral(styleNameAttr.value)) {\n    if (!styleNameAttr.value.value) {\n      return undefined;\n    }\n    const stringValueReplacement = styleNameAttr.value.value\n      .split(\" \")\n      .map(val => t.stringLiteral(val));\n    if (stringValueReplacement.length > 1) {\n      return t.arrayExpression(stringValueReplacement);\n    }\n\n    if (stringValueReplacement[0]) {\n      return stringValueReplacement[0];\n    }\n\n    return undefined;\n  }\n\n  return styleNameAttr.value.expression;\n};\n\nconst visitor = (t, getStyleNameIdentifier, config) => ({\n  JSXElement(path) {\n    if (path.node.openingElement.attributes.length) {\n      const spreadAttr = findJSXSpreadAttr(path, t);\n      const styleNameAttrIndex = findStyleNameAttrIndex(path, config, t);\n\n      const styleNameAttr = path.node.openingElement.attributes.find(\n        attr => ensureAttrName(attr) === config.targetTag,\n      );\n\n      if (styleNameAttr) {\n        const styleNameAttrPayload = getStyleNameAttrPayload(t, styleNameAttr);\n\n        const styleNameExp = t.callExpression(getStyleNameIdentifier, [\n          ...[styleNameAttrPayload].filter(Boolean),\n        ]);\n        const classNameAttr = findClassNameAttr(path, t);\n\n        if (classNameAttr) {\n          if (styleNameAttrPayload) {\n            if (t.isJSXExpressionContainer(classNameAttr.value)) {\n              classNameAttr.value = t.JSXExpressionContainer(\n                t.binaryExpression(\n                  \"+\",\n                  classNameAttr.value.expression,\n                  styleNameExp,\n                ),\n              );\n            }\n\n            if (t.isStringLiteral(classNameAttr.value)) {\n              classNameAttr.value = t.JSXExpressionContainer(\n                t.binaryExpression(\"+\", classNameAttr.value, styleNameExp),\n              );\n            }\n          }\n          removeStyleNameAttr(path, config);\n        } else {\n          const newClassNameAttr = createClassNameAttr(\n            t,\n            t.JSXExpressionContainer(\n              spreadAttr\n                ? t.binaryExpression(\"+\", spreadAttr, styleNameExp)\n                : styleNameExp,\n            ),\n          );\n\n          path.node.openingElement.attributes[\n            styleNameAttrIndex\n          ] = newClassNameAttr;\n        }\n      }\n    }\n  },\n});\n\nconst getStylesArgument = path => path.parent.arguments[0];\n\nconst myMacro = ({ references, babel, config }) => {\n  const marcoConfig = { ...defaultConfig, ...config };\n  const { macro = [] } = references;\n  const { types: t } = babel;\n  macro.forEach(referencePath => {\n    const stylesArgument = getStylesArgument(referencePath);\n\n    if (!stylesArgument) {\n      throw \"Styles map argument must be provided\";\n    }\n\n    const programPath = referencePath.findParent(parentPath =>\n      parentPath.isProgram(),\n    );\n    referencePath.parentPath.remove();\n    const firstImportDeclarationNode = programPath\n      .get(\"body\")\n      .find(node => t.isImportDeclaration(node));\n\n    const firstNonImportDeclarationNode = programPath\n      .get(\"body\")\n      .find(node => !t.isImportDeclaration(node));\n\n    const getStyleNameIdentifier = programPath.scope.generateUidIdentifier(\n      \"getStyleName\",\n    );\n\n    const bindStyleNames = programPath.scope.generateUidIdentifier(\n      \"bindStyleNames\",\n    );\n\n    const bindImplementation = marcoConfig.enableMemo\n      ? `${name}/dist/bindStyleNameMemo`\n      : `${name}/dist/bindStyleNamePure`;\n    const helperImportDeclaration = t.importDeclaration(\n      [t.importDefaultSpecifier(bindStyleNames)],\n      t.stringLiteral(bindImplementation),\n    );\n\n    const bindedStylesDeclaration = t.variableDeclaration(\"const\", [\n      t.variableDeclarator(\n        getStyleNameIdentifier,\n        t.callExpression(bindStyleNames, [\n          stylesArgument,\n          marcoConfig.warning\n            ? t.booleanLiteral(true)\n            : t.booleanLiteral(false),\n        ]),\n      ),\n    ]);\n\n    firstImportDeclarationNode.insertBefore(helperImportDeclaration);\n    firstNonImportDeclarationNode.insertBefore(bindedStylesDeclaration);\n\n    programPath.traverse(visitor(t, getStyleNameIdentifier, marcoConfig));\n  });\n};\n\nexport default createMacro(myMacro, { configName: \"reactCssModulesMacro\" });\n"],"names":["createMacro","require","name","defaultConfig","enableMemo","targetTag","warning","ensureAttrName","attr","references","babel","marcoConfig","config","macro","t","types","forEach","referencePath","stylesArgument","parent","arguments","programPath","findParent","parentPath","isProgram","remove","firstImportDeclarationNode","get","find","node","isImportDeclaration","firstNonImportDeclarationNode","getStyleNameIdentifier","scope","generateUidIdentifier","bindStyleNames","bindImplementation","helperImportDeclaration","importDeclaration","importDefaultSpecifier","stringLiteral","bindedStylesDeclaration","variableDeclaration","variableDeclarator","callExpression","booleanLiteral","insertBefore","traverse","JSXElement","path","openingElement","attributes","length","spreadAttr","propsSpread","isJSXSpreadAttribute","memberExpression","argument","identifier","findJSXSpreadAttr","styleNameAttrIndex","map","isJSXAttribute","indexOf","findStyleNameAttrIndex","styleNameAttr","styleNameAttrPayload","isStringLiteral","value","stringValueReplacement","split","val","arrayExpression","expression","getStyleNameAttrPayload","styleNameExp","filter","Boolean","classNameAttr","findClassNameAttr","isJSXExpressionContainer","JSXExpressionContainer","binaryExpression","removeStyleNameAttr","newClassNameAttr","JSXAttribute","jsxIdentifier","createClassNameAttr","visitor","configName"],"mappings":"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"}